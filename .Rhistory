g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
B = B - solve(H)%*%G
L = 1/2*log(2/pi) - 1/2*log(sig2) - 1/(2*sig2*T)*sum( (y2 - beta1 - beta2*x2)^2)
cat('G:', G, 'L:', L, '\n')
beta1 = B[1]
beta2 = B[2]
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
B = B - solve(H)%*%G
L = 1/2*log(2/pi) - 1/2*log(sig2) - 1/(2*sig2*T)*sum( (y2 - beta1 - beta2*x2)^2)
cat('G:', G, 'L:', L, '\n')
beta1 = B[1]
beta2 = B[2]
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
B = B - solve(H)%*%G
L = 1/2*log(2/pi) - 1/2*log(sig2) - 1/(2*sig2*T)*sum( (y2 - beta1 - beta2*x2)^2)
cat('G:', G, 'L:', L, '\n')
H
y2 = c(2.850, 3.105, 5.693, 8.101, 10.387, 3, 44, 5.5, 0.8)
x2 = c(3, 6, 12, 3, 1.4, 0.9, -1, 22, 4.3)
sig2 = 1e6
T = length(x2)
beta1 = 0.11
beta2 = -100
B = rbind(beta1, beta2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
tol = 1/1e5
matrix = ( data=c(−4,  0.228, 0.228, -0.547), ncol=2, nrow=2)
matrix = (data=c(−4,  0.228, 0.228, -0.547), ncol=2, nrow=2)
matrix = (c(−4,  0.228, 0.228, -0.547), ncol=2, nrow=2 )
m = matrix(c(−4,  0.228, 0.228, -0.547), ncol=2, nrow=2)
m2 = matrix(c(0.931, 0.280), ncol=1, nrow=2)
m2 = matrix(c(0.931, 0.280), ncol=1, nrow=2)
th = matrix(c(0.5, 1.5), ncol=1, nrow=2)
th - solve(m1)*m2
m1 = matrix(c(−4,  0.228, 0.228, -0.547), ncol=2, nrow=2)
m2 = matrix(c(0.931, 0.280), ncol=1, nrow=2)
th = matrix(c(0.5, 1.5), ncol=1, nrow=2)
th = matrix(c(0.5, 1.5), ncol=1, nrow=2)
th - solve(m1)%*%m2
m1
m1 = matrix(c(−4,  -0.228, -0.228, -0.547), ncol=2, nrow=2)
m2 = matrix(c(0.931, 0.280), ncol=1, nrow=2)
th = matrix(c(0.5, 1.5), ncol=1, nrow=2)
th - solve(m1)%*%m2
y2 = c(2.850, 3.105, 5.693, 8.101, 10.387, 3, 44, 5.5, 0.8)
x2 = c(3, 6, 12, 3, 1.4, 0.9, -1, 22, 4.3)
sig2 = 1e6
T = length(x2)
beta1 = 0.11
beta2 = -100
B = rbind(beta1, beta2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
tol = 1/1e5
while (tol > min(G)){
beta1 = B[1]
beta2 = B[2]
L = 1/2*log(2/pi) - 1/2*log(sig2) - 1/(2*sig2*T)*sum( (y2 - beta1 - beta2*x2)^2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
B = B - solve(H)%*%G
cat('G:', G, 'L:', L, '\n')
}
while (tol < min(G)){
beta1 = B[1]
beta2 = B[2]
L = 1/2*log(2/pi) - 1/2*log(sig2) - 1/(2*sig2*T)*sum( (y2 - beta1 - beta2*x2)^2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
B = B - solve(H)%*%G
cat('G:', G, 'L:', L, '\n')
}
sig2 = 1.5
T = length(x2)
beta1 = 0.11
beta2 = -100
B = rbind(beta1, beta2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
tol = 1/1e5
while (tol < min(G)){
beta1 = B[1]
beta2 = B[2]
L = 1/2*log(2/pi) - 1/2*log(sig2) - 1/(2*sig2*T)*sum( (y2 - beta1 - beta2*x2)^2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
B = B - solve(H)%*%G
cat('G:', G, 'L:', L, '\n')
}
beta1 = 0.11
beta2 = 0
B = rbind(beta1, beta2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
tol = 1/1e5
while (tol < min(G)){
beta1 = B[1]
beta2 = B[2]
L = 1/2*log(2/pi) - 1/2*log(sig2) - 1/(2*sig2*T)*sum( (y2 - beta1 - beta2*x2)^2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
B = B - solve(H)%*%G
cat('G:', G, 'L:', L, '\n')
}
while (tol < min(G)){
beta1 = B[1]
beta2 = B[2]
L = 1/2*log(2/pi) - 1/2*log(sig2) - 1/(2*sig2*T)*sum( (y2 - beta1 - beta2*x2)^2)
g1 = 1/(sig2*T) *sum(y2 - beta1 - beta2*x2)
h1 = -1/(T*sig2)
g2 = 1/(T*sig2) * sum(y2*x2 - beta1*x2 - beta2*x2^2)
h2 = -beta2/(T*sig2) * sum(x2^2)
G = rbind(g1, g2)
H = matrix(c(h1, 0, 0, h2), nrow = 2, ncol = 2)
B = B - solve(H)%*%G
cat('G:', G, 'L:', L, '\n')
}
exp(0.73654)
exp(0.73654)
exp(0.7198)
17^2
289-4*52
4*13
exp(0.248)
exp(0.1528)
exp(0.1523)
186/26
exp(-2.16)
exp(-2.19)
exp(-2.29)
exp(-2.38)
exp(-238)
exp(-23.8)
exp(-5)
exp(-6)
exp(-7)
exp(-8)
exp(-2.5)
exp(-3.36)
***
plot(cars)
x = seq(-5, 5, 0.1)
y = x^(-0.4)
plot(y, x)
plot(y, x, type='line')
plot( x, y, type='line')
y = x^(-0.8)
x = seq(-5, 5, 0.1)
y = x^(-0.8)
plot( x, y, type='line')
plot( x, y, type='l')
y = x^(-0.1)
plot( x, y, type='l')
65*418
exp(-6.13)
0.03*26
0.03*26000
log(3)
log(-3)
log(1/3)
-log(1/3)
1.3/0.7
-(1 + 0.3)/0.7
0.4^10
0.4^100
y = c(1, 4, 3, 5, 7)
x = c(0.5, 1, 2, 11, 2)
y = c(1, 4, 3, 5, 7)
x = c(0.5, 1, 2, 11, 2)
df = data.frame(y, x)
df[1]
pars = c(1, 2)
otim = function(data, pars){
y_hat = pars[1] + pars[2]*df[2]
y_hat_med = mean(y_hat)
y_mean = mean(df[1])
dist = y_hat_med - y_med
}
otim(df, pars)
mean(df[1])
df[1]
str(df[1])
str(df)
mean(df[1])
mean(as.numeric(df[1]))
mean(as.numeric(df[1]))
mean(y)
mean(df[,1])
otim = function(data, pars){
y_hat = pars[1] + pars[2]*df[,2]
y_hat_med = mean(y_hat)
y_mean = mean(df[,1])
dist = abs(y_hat_med - y_med)
}
otim(df, pars)
otim = function(data, pars){
y_hat = pars[1] + pars[2]*df[,2]
y_hat_med = mean(y_hat)
y_med = mean(df[,1])
dist = abs(y_hat_med - y_med)
}
otim(df, pars)
otim = function(data, pars){
y_hat = pars[1] + pars[2]*df[,2]
y_hat_med = mean(y_hat)
y_med = mean(df[,1])
dist = abs(y_hat_med - y_med)
return(dist)
}
otim(df, pars)
library(optimx)
optim(par = pars, fn = otim, data=df)
lm(y~x)
sample('cara', 'coroa')
sample('cara', 'coroa')
sample('cara', 'coroa', 1)
a = c('cara', 'coroa')
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
for(i in 1,100){
print(sample(a, 1))
}
for(i in 1,100){
print(sample(a, 1))
}
for(i in 1:100){
print(sample(a, 1))
}
for(i in 1:100){
print(sample(a, 1))
}
a = c(1, 2, 3, , 5)
a = c(1, 2, 3,'NaN', 5)
a
is.na(a)
is.nan(a)
a = c(1, 2, 3,., 5)
a = c(1, 2, 3, , 5)
a = c(1, 2, 3, NaN, 5)
is.nan(a)
mean(a, na.rm = T)
11/4
mean(a)
index = is.nan(a)==FALSE
a[index]
a[1]
a[1:3]
summary(a)
ifelse(is.na(a)==T, a=mean(a, na.rm = T), a)
mean(a, na.rm = T)
ifelse(is.na(a)==T, a = mean(a, na.rm = T), a)
mean(a, na.rm = T)
b = mean(a, na.rm = T)
ifelse(is.na(a)==T, a = b, a)
ifelse(is.na(a) = T, a = b, a)
ifelse(is.na(a) == T, a == b, a)
ifelse(is.na(a) == T, a == b, a)
ifelse(is.na(a) == T, a = b, a)
ifelse(is.na(a) == T, a = b, a=a)
ifelse(is.na(a) == T, b, a)
setwd("D:/Curso de R")
vec = c(2, 22, 34, 0, 67,3, 4, 6, 7, 80)
vec[1:5]
sqrt(vec)
sin(vec)
log(vec)
cos(vec)
vec1 = c('b', 'nn', 'k')
is.character(vec1)
vec2 = c(3, 'b', 'nn', 'k')
typeof(vec2)
vec + 2
2*vec
sqrt(vec, 3)
vec^(1/3)
vec3 = c(NaN, 3, 4, 6, 7, 8)
mean(vec3)
mean(vec3, na.rm = T)
is.na(vec3)
mean(vec3, na.rm = T)
na.omit(vec3)
na.omit(vec3)
as.numeric( na.omit(vec3) )
index = is.na(vec3) == FALSE
vec3[index]
summary(vec3, na.rm=T)
summary(vec3)
sd(vec3)
sd(vec3, na.rm=T)
seq(1,10) # 1 a 10
seq(1,10, 2)  # from 1 to 10 jumping from 2 to 2
seq(10,1, -2) # from 10 to 1 jumping from 2 to 2
rep(c(1, 3), 4)
rep(10, 5) # repeat 10 five times
rep(c(1,2, 3), c(3, 2, 1))
v1 = c('learn', 'r', 'funny')
v2 = c('very', 'easy', 'now')
v3 = c('sometimes', 'very', 'hard')
v4 = c(1, 2, 3)
B = rbind(v1, v2,v3,v4)       #or
B
B = cbind(v1, v2,v3,v4)
B
c1 = seq(1, 5,1)
c2 = rnorm(5)
c3 = seq(-44, -40, 1)
C = rbind(c1,c2,c3)
nr = c('j', 'k', 'l')
nr = c('j', 'k', 'l')
nc = c('l1', 'l2', 'l3', 'l4', 'l5')
colnames(C) = nc
rownames(C) = nr
C
x1 = c(2, 1, 5, 7, 8, 0, 2, 1)
x2 = c(11, 2, 4, 5, 78, 1, 2, 9)
x = cbind(x1, x2)
y = c(1, 5, 2, 3, 7, 32, 2, 0)
l = 0.5
library(matlib) # to use inv function
b = inv(t(x)%*%x)%*%t(x)%*%y   # inv(t(x)) inverse of tranpose x matrix
b
reg = lm(y ~x1 + x2 - 1)  # -1 ommit intercept
summary(reg)
b
setwd('D:/Git projects/Econometry')   # definir o diretório
seq(1, 10, 1)
seq(1, 10, 1)
seq(1, 10, 2)
seq(10, 1, -2)
rep(10, 5)
rep('Olá mundo', 10)
rep('Olá mundo', 100)
rep('Olá mundo', 10000)
rep('Olá mundo', 100)
rep(c(1, 2), 5)
rep(c(1, 2, 3), c(3, 2, 1))
vec = (2, 22, 34,0, 67, 3, 4, 6,7, 80)
vec = c(2, 22, 34,0, 67, 3, 4, 6,7, 80)
vec
sqrt(vec)
sin(vec)
log(vec)
log(vec, base=10)
cos(vec)
vec + 4
2*vec
vec^1/3
vec^(1/3)
mean(vec)
sd(vec)
summary(vec)
vec1 = c('b', 'nn', 'k')
vec2 = c(1, 'f', 'm', 'olá')
typeof(vec1)
typeof(vec2)
vec
vec[-1]
vec[-10]
vec
vec[5]
vec[-5]
vec[-10]
vec[1:3]
vec[c(1, 3, 5)]
vec[-2:-4]
vec>6
vec
vec
vec>6
vec[vec>6]
vec[vec==80]
vec[vec<10]
vec[vec<10]
vec[vec<0]
x = c(1, 5, 6, 7, 8)
y = c(33, 4, 41, 7, 11)
x + y
length(x)
x/y
x*y
x-y
x>y
x!=y
x == y
z = c(11, 2)
y + z
vec3 = c(NaN, 3, 4, 6, 7, 8)
mean(vec3)
mean(vec3, na.rm = T)
sd(vec3, na.rm=T)
is.na(vec3)
is.na(vec3)
index = is.na(vec3) == FALSE
vec3[index]
is.na(vec3)
summary(vec3)
d = seq(1, 20, 1)
d
A1 = matrix(d, nrow=4, ncol =5)
A1
f = c('a', 'b', 'c')
t = rep(f, 3)
A2 = matrix(t, 3, 3)
A2
rep(f, 3)
c1 = seq(1, 5, 1)
c2 = rnorm(5)
rnorm(5)
c3 = seq(-44, -40, 1)
c(seq(-44, -40, 1))
C = rbind(c1, c2, c3)
C
Cbind(c1, c2, c3)
cbind(c1, c2, c3)
nr = c('a', 'b', 'c')
nr = c('a', 'b', 'c')
nc = c('c1', 'c2', 'c3', 'c4', 'c5')
C
colnames(C) = nc
rownames(C) = nr
C
C['a', 'c1']
C['c', 'c4']
mean(vec3)
mean(vec3, na.rm=T)
C[1, 4]
x1 = c(2, 1, 5, 7, 8, 0, 2, 1)
x2 = c(11, 2, 4, 5, 78, 1, 2, 9)
x = cbind(x1, x2)
y = c(1, 5, 2, 3, 7, 32, 2, 0)
install.packages('matlib')
x
y
b = inv(t(x)%*%x)%*%t(x)%*%y
library(matlib)
b = inv(t(x)%*%x)%*%t(x)%*%y
b
reg = lm(y ~ x1 + x2 - 1)
summary(reg)
b
saveRDS(vec3, file = 'teste')
